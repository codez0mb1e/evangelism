
//
// CNN definition for MNIST model
// Source: https://gallery.azure.ai/Experiment/Neural-Network-Convolution-and-pooling-deep-net-2
//


const { T = true; F = false; }

const {
// input image size
ImgW = 28;
ImgH = 28;


// first convolutional layer parameters
C1Maps = 5;
C1KernW = 5;
C1KernH = 5;
C1StrideW = 1;
C1StrideH = 1;

// The following formula computes dimensions with padding enabled.
C1OutW = (ImgW - 1) / C1StrideW + 1;
C1OutH = (ImgH - 1) / C1StrideH + 1;


// first pooling layer parameters
P1KernW = 2;
P1KernH = 2;
P1StrideW = 2;
P1StrideH = 2;

// The following formula computes dimensions with no padding.
P1OutW = (C1OutW - P1KernW) / P1StrideW + 1;
P1OutH = (C1OutH - P1KernH) / P1StrideH + 1;


// second convolutional layer parameters
C2Maps = 10;
C2KernW = 5;
C2KernH = 5;
C2StrideW = 1;
C2StrideH = 1;

// The following formula computes dimensions with padding enabled.
C2OutW = (P1OutW - 1) / C2StrideW + 1;
C2OutH = (P1OutH - 1) / C2StrideH + 1;

// Since Z dimension of the kernel is 1 and sharing is disabled in Z dimension
// total number of maps is a product of input maps and layer maps.
C2OutZ = C2Maps * C1Maps;


// second pooling layer parameters
P2KernW = 2;
P2KernH = 2;
P2StrideW = 2;
P2StrideH = 2;
// The following formula computes dimensions with no padding.
P2OutW = (C2OutW - P2KernW) / P2StrideW + 1;
P2OutH = (C2OutH - P2KernH) / P2StrideH + 1;
}


// define CNN

input Picture [ImgH, ImgW];

hidden C1 [C1Maps, C1OutH, C1OutW]
  from Picture convolve {
    InputShape  = [ImgH, ImgW];
    KernelShape = [C1KernH, C1KernW];
    Stride      = [C1StrideH, C1StrideW];
    Padding     = [T, T];
    MapCount = C1Maps;
  }

hidden P1 [C1Maps, P1OutH, P1OutW]
  from C1 max pool {
    InputShape  = [C1Maps, C1OutH, C1OutW];
    KernelShape = [1, P1KernH, P1KernW];
    Stride      = [1, P1StrideH, P1StrideW];
  }

hidden C2 [C2OutZ, C2OutH, C2OutW]
  from P1 convolve {
    InputShape  = [C1Maps, P1OutH, P1OutW];
    KernelShape = [1, C2KernH, C2KernW];
    Stride      = [1, C2StrideH, C2StrideW];
    Sharing     = [F, T, T];
    Padding     = [F, T, T];
    MapCount = C2Maps;
  }

hidden P2 [C2OutZ, P2OutH, P2OutW]
  from C2 max pool {
    InputShape  = [C2OutZ, C2OutH, C2OutW];
    KernelShape = [1,  P2KernH, P2KernW];
    Stride      = [1,  P2StrideH, P2StrideW];
  }

hidden H3 [100]
  from P2 all;

output Result [10] softmax
  from H3 all;
